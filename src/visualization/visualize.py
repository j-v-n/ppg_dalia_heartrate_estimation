"""
Utils to help with data visualization

"""
from __future__ import annotations
from pandas import DataFrame
import os
import pickle
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

ACTIVITY_DICT = {
    0: "transient",
    1: "sitting",
    2: "stairs",
    3: "table_soccer",
    4: "cycling",
    5: "driving",
    6: "lunch_break",
    7: "walking",
    8: "working",
}


def create_dataframe(filepath, subject_name: str) -> DataFrame:
    """
    Function to create dataframe from the .pkl files in data/raw
    for each subject at a fixed sampling frequency of 4 Hz

    Inputs:
     - filepath (path) : path to data
     - subject_name (str) : 'S1','S2'.....'S15'


    Returns:
     - subject_df (DataFrame) with the following columns:
        - 'bvp': PPG sensor measurement
        - 'acc_x' : 3D accelerometer reading in x axis, in 1/64 g
        - 'acc_y' : 3D accelerometer reading in y axis, in 1/64 g
        - 'acc_z' : 3D accelerometer reading in z axis, in 1/64 g
        - 'temp' : Skin temperature reading, in C
        - 'eda' : Electrodermal activity, in microsecs
        - 'heart_rate': Ground truth heart rate, in bpm
    """

    # recording frequencies of different measurements
    BVP_FREQUENCY = 64
    ACC_FREQUENCY = 32
    SAMPLING_FREQUENCY = 4

    with open(os.path.join(filepath, subject_name, f"{subject_name}.pkl"), "rb") as f:
        # encoding in latin1
        data = pickle.load(f, encoding="latin1")
    # extract the PPG data from the "wrist" key
    wrist_data = data["signal"]["wrist"]
    # extract activity signal
    activity_data = data["activity"]
    # extract metadata about subject
    subject_data = data["questionnaire"]
    # extract heart rate information
    heart_rate_data = data["label"]
    # resampling heart rate data first and obtaining length
    # NOTE: heart rate data is provided for every 2 seconds in the raw format
    # therefore during resampling, multiply the sampling_frequency by 2
    heart_rate_data = np.repeat(heart_rate_data, SAMPLING_FREQUENCY * 2)
    length_heart_rate_data = heart_rate_data.shape[0]
    length_activity_data = activity_data.shape[0]
    # in many cases length_heart_rate_data < activity_data
    # we drop the last remaining data points for which heart_rate_data is not available
    delta_samples = length_activity_data - length_heart_rate_data
    # resampling and cutting the extracted information
    wrist_data["BVP"] = wrist_data["BVP"][:: BVP_FREQUENCY // SAMPLING_FREQUENCY][
        :-delta_samples
    ]
    wrist_data["ACC"] = wrist_data["ACC"][:: ACC_FREQUENCY // SAMPLING_FREQUENCY][
        :-delta_samples
    ]
    wrist_data["TEMP"] = wrist_data["TEMP"][:-delta_samples]
    wrist_data["EDA"] = wrist_data["EDA"][:-delta_samples]
    activity_data = activity_data[:-delta_samples]

    # assimilating everything into a dataframe
    df = pd.DataFrame(wrist_data["BVP"])
    df.columns = ["bvp"]
    df["subject"] = subject_name
    df["gender"] = subject_data["Gender"]
    df["age"] = subject_data["AGE"]
    df["height"] = subject_data["HEIGHT"]
    df["weight"] = subject_data["WEIGHT"]
    # the skin data is classified according to Fitzpatrick 1988 on the basis of sun-reactivity
    df["skin"] = subject_data["SKIN"]
    # the sport value is a scale from 1-6. 1 being not very physically active and 6 being very physically active
    df["sport"] = subject_data["SPORT"]
    df["acc_x"] = wrist_data["ACC"][:, 0]
    df["acc_y"] = wrist_data["ACC"][:, 1]
    df["acc_z"] = wrist_data["ACC"][:, 2]
    df["temp"] = wrist_data["TEMP"]
    df["eda"] = wrist_data["EDA"]
    df["activity"] = activity_data
    df["heart_rate"] = heart_rate_data
    return df


def activityhr_lineplots(
    df: DataFrame,
    xmin: float = 0.0,
    xmax: float = 9500.0,
    ymin: float = 0.0,
    ymax: float = 200.0,
):
    """
    Function to create line plots of heart rate with superimposed
    activity regions and labels

    Inputs:
     - df (DataFrame): Generated by create_dataframe


    """

    # create a time series
    time = np.linspace(0, df.shape[0] / 4, df.shape[0])
    # create the figure
    fig, ax = plt.subplots(figsize=(20, 4))
    # plot the heart rate line
    ax.plot(time, df["heart_rate"], "k")
    plt.xlim([xmin, xmax])
    plt.ylim([ymin, ymax])
    # iterate through each activity defined in the dataset
    for i in range(1, 9):
        # create a filter to obtain only data related to specific activity
        filt = df["activity"] == i
        # obtain start time
        start_time = df[filt].index[0] / 4
        # obtain end time
        end_time = df[filt].index[-1] / 4
        # from start_time to end_time, color the vertical axis
        ax.axvspan(start_time, end_time, facecolor="green", alpha=0.5)
        # annotate the activity blocks
        ax.text(start_time, 180, ACTIVITY_DICT[i])
    # label axes
    ax.set_xlabel("Time (seconds)")
    ax.set_ylabel("Heart Rate (bpm)")
    # title the plot with subject information
    plt.title(
        "Subject - {0}, Gender - {1}, Age - {2}, Height - {3}, Weight - {4}, Sport - {5}, Skin - {6}".format(
            df["subject"][0],
            df["gender"][0],
            df["age"][0],
            df["height"][0],
            df["weight"][0],
            df["sport"][0],
            df["skin"][0],
        )
    )
    return fig


def activityhr_violinplots(
    df: DataFrame,
    xmin: float = 0.0,
    xmax: float = 9500.0,
    ymin: float = 0.0,
    ymax: float = 200.0,
):
    """
    Function to create violin plots of heart rates for different activities

    Inputs:
     - df (DataFrame): Generated by create_dataframe

    """
    # create a figure
    fig, ax = plt.subplots(figsize=(10, 5))
    # plt.xlim([xmin, xmax])
    plt.ylim([ymin, ymax])
    # use seaborn's violinplot API to generate violin plots
    ax = sns.violinplot(x="activity", y="heart_rate", data=df)
    # rename labels to activity names
    labels = [item.get_text() for item in ax.get_xticklabels()]
    for i, _ in enumerate(labels):
        labels[i] = ACTIVITY_DICT[i]
    ax.set_xticklabels(labels)
    # title the plot with subject information
    plt.title(
        "Subject - {0}, Gender - {1}, Age - {2}, Height - {3}, Weight - {4}, Sport - {5}, Skin - {6}".format(
            df["subject"][0],
            df["gender"][0],
            df["age"][0],
            df["height"][0],
            df["weight"][0],
            df["sport"][0],
            df["skin"][0],
        )
    )
    return fig
